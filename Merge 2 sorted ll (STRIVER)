
// APPROACH 
//          Create an array arr3[] of size n1 + n2.
// Simultaneously traverse arr1[] and arr2[]. 
// Pick smaller of current elements in arr1[] and arr2[], 
// copy this smaller element to next position in arr3[] 
// and move ahead in arr3[] and the array whose element is picked.
// If there are remaining elements in arr1[] or arr2[], copy them also in arr3[].


#include<iostream>
#include<bits/stdc++.h>
using namespace std; 

struct node{
int data;
struct node *next;
};

node * mergetwosortedll(node *head1,node*head2){
    node *res,*current;
    node *temp1=head1,*temp2=head2;
    if(head1->data<head2->data){
        res=head1;
        current=head1;
    }
    else{
        res=head2;
        current=head2;
   }
   while(temp1 and temp2){
       if(temp1->data<temp2->data){
           node *helper=temp1;
           temp1=temp1->next;
           helper->next=NULL;
           current->next=helper;
           current=current->next;
           }
           else{
           node *helper=temp2;
           temp2=temp2->next;
           helper->next=NULL;
           current->next=helper;
           current=current->next;
           }
       
   }//while ends
   while(temp1){
       current->next=temp1;
       temp1=temp1->next;
   }
      while(temp2){
       current->next=temp2;
       temp2=temp2->next;
   }
   return res;
    
}
int main(){ 
    node n1={10,NULL};
    node n2={20,NULL};
    node n3={30,NULL}; 
    node n4={40,NULL};
    node n5={50,NULL};
    node n6={60,NULL};
    node n7={70,NULL};
n1.next=&n2;n2.next=&n3; n3.next=&n4; n4.next=&n5; n5.next=&n6; n6.next=&n7;
node* head1=&n1;
   
    node n21={15,NULL};
    node n22={25,NULL};
    node n23={35,NULL}; 
    node n24={45,NULL};
    node n25={55,NULL};
    node n26={65,NULL};
    node n27={75,NULL};
n21.next=&n22;n22.next=&n23; n23.next=&n24; n24.next=&n25; n25.next=&n26; n26.next=&n27;
node* head2=&n21;

node *temp=mergetwosortedll(head1,head2);

while(temp){
cout<<temp->data<<" ";
temp=temp->next;
}
return 0;
}
